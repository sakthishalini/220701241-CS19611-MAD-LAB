package com.example.madprojectmad

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            TravelChecklistApp()
        }
    }
}

@Composable
fun TravelChecklistApp() {
    var isLoggedIn by remember { mutableStateOf(false) }
    var usernameInput by remember { mutableStateOf("") }
    var passwordInput by remember { mutableStateOf("") }

    if (!isLoggedIn) {
        LoginScreen(
            username = usernameInput,
            password = passwordInput,
            onUsernameChange = { usernameInput = it },
            onPasswordChange = { passwordInput = it },
            onLoginClick = {
                if (usernameInput == "harsha" && passwordInput == "1234") {
                    isLoggedIn = true
                }
            }
        )
    } else {
        TravelChecklistContent(
            onPackDoneClick = { isLoggedIn = false }
        )
    }
}

@Composable
fun LoginScreen(
    username: String,
    password: String,
    onUsernameChange: (String) -> Unit,
    onPasswordChange: (String) -> Unit,
    onLoginClick: () -> Unit
) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFE0BBE4)),
        contentAlignment = Alignment.Center
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            modifier = Modifier.padding(24.dp)
        ) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                Text(
                    text = "PackDone",
                    style = TextStyle(
                        fontSize = 40.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF800080)
                    ),
                    modifier = Modifier.padding(bottom = 32.dp)
                )
                Text(
                    text = "  ✈️  ",
                    fontSize = 36.sp
                )
            }

            OutlinedTextField(
                value = username,
                onValueChange = onUsernameChange,
                label = { Text("Username") },
                modifier = Modifier.fillMaxWidth()
            )

            Spacer(modifier = Modifier.height(16.dp))

            OutlinedTextField(
                value = password,
                onValueChange = onPasswordChange,
                label = { Text("Password") },
                modifier = Modifier.fillMaxWidth(),
                keyboardOptions = KeyboardOptions.Default.copy(imeAction = ImeAction.Done),
                keyboardActions = KeyboardActions(onDone = { onLoginClick() })
            )

            Spacer(modifier = Modifier.height(24.dp))

            Button(
                onClick = onLoginClick,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Login")
            }
        }
    }
}

data class ChecklistItem(
    val text: String,
    var isChecked: Boolean = false
)

@Composable
fun TravelChecklistContent(onPackDoneClick: () -> Unit) {
    val context = LocalContext.current

    val clothingList = remember { mutableStateListOf(
        ChecklistItem("Shirt"), ChecklistItem("Pants"), ChecklistItem("Jacket")
    )}
    val accessoriesList = remember { mutableStateListOf(
        ChecklistItem("Sunglasses"), ChecklistItem("Watch"), ChecklistItem("Belt")
    )}
    val medicinesList = remember { mutableStateListOf(
        ChecklistItem("Paracetamol"), ChecklistItem("Band-aid"), ChecklistItem("Thermometer")
    )}
    val essentialsList = remember { mutableStateListOf(
        ChecklistItem("Passport"), ChecklistItem("Wallet"), ChecklistItem("Phone Charger")
    )}

    var clothingInput by remember { mutableStateOf("") }
    var accessoriesInput by remember { mutableStateOf("") }
    var medicinesInput by remember { mutableStateOf("") }
    var essentialsInput by remember { mutableStateOf("") }

    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        item {
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "PackDone 🎒",
                    style = TextStyle(
                        fontSize = 30.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF6A1B9A)
                    )
                )
                Button(
                    onClick = {
                        Toast.makeText(context, "Happy Journey! ✈️", Toast.LENGTH_SHORT).show()
                        onPackDoneClick()
                    },
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF6A1B9A),
                        contentColor = Color.White
                    )
                ) {
                    Text("PackDone")
                }
            }
        }

        item {
            Text(
                text = "Your Travel Checklist 🧳",
                style = TextStyle(
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF512DA8)
                ),
                modifier = Modifier.padding(bottom = 24.dp)
            )
        }

        // Clothing
        item { SectionTitle("👕 Clothing") }
        item {
            AddItemRow(
                inputText = clothingInput,
                onTextChange = { clothingInput = it },
                onAddClick = {
                    if (clothingInput.isNotBlank()) {
                        clothingList.add(ChecklistItem(clothingInput))
                        clothingInput = ""
                    }
                }
            )
        }
        items(clothingList, key = { it.text }) { item ->
            ChecklistRow(item, onDelete = { clothingList.remove(item) })
        }

        // Accessories
        item { SectionTitle("🕶️ Accessories") }
        item {
            AddItemRow(
                inputText = accessoriesInput,
                onTextChange = { accessoriesInput = it },
                onAddClick = {
                    if (accessoriesInput.isNotBlank()) {
                        accessoriesList.add(ChecklistItem(accessoriesInput))
                        accessoriesInput = ""
                    }
                }
            )
        }
        items(accessoriesList, key = { it.text }) { item ->
            ChecklistRow(item, onDelete = { accessoriesList.remove(item) })
        }

        // Medicines
        item { SectionTitle("💊 Medicines") }
        item {
            AddItemRow(
                inputText = medicinesInput,
                onTextChange = { medicinesInput = it },
                onAddClick = {
                    if (medicinesInput.isNotBlank()) {
                        medicinesList.add(ChecklistItem(medicinesInput))
                        medicinesInput = ""
                    }
                }
            )
        }
        items(medicinesList, key = { it.text }) { item ->
            ChecklistRow(item, onDelete = { medicinesList.remove(item) })
        }

        // Essentials
        item { SectionTitle("📋 Essentials") }
        item {
            AddItemRow(
                inputText = essentialsInput,
                onTextChange = { essentialsInput = it },
                onAddClick = {
                    if (essentialsInput.isNotBlank()) {
                        essentialsList.add(ChecklistItem(essentialsInput))
                        essentialsInput = ""
                    }
                }
            )
        }
        items(essentialsList, key = { it.text }) { item ->
            ChecklistRow(item, onDelete = { essentialsList.remove(item) })
        }
    }
}

@Composable
fun SectionTitle(title: String) {
    Text(
        text = title,
        style = TextStyle(
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF512DA8)
        ),
        modifier = Modifier.padding(vertical = 12.dp)
    )
}

@Composable
fun AddItemRow(
    inputText: String,
    onTextChange: (String) -> Unit,
    onAddClick: () -> Unit
) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier.padding(bottom = 12.dp)
    ) {
        OutlinedTextField(
            value = inputText,
            onValueChange = onTextChange,
            label = { Text("Add item") },
            modifier = Modifier.weight(1f)
        )
        Spacer(modifier = Modifier.width(8.dp))
        Button(onClick = onAddClick) {
            Text("+")
        }
    }
}

@Composable
fun ChecklistRow(item: ChecklistItem, onDelete: () -> Unit) {
    var isChecked by remember { mutableStateOf(item.isChecked) }

    Row(
        verticalAlignment = Alignment.CenterVertically,
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 6.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Checkbox(
                checked = isChecked,
                onCheckedChange = { checked ->
                    isChecked = checked
                    item.isChecked = checked
                }
            )
            Text(
                text = item.text,
                style = TextStyle(
                    fontSize = 18.sp,
                    color = if (isChecked) Color.Gray else Color.Black,
                    textDecoration = if (isChecked) TextDecoration.LineThrough else TextDecoration.None
                )
            )
        }
        IconButton(onClick = onDelete) {
            Icon(
                imageVector = Icons.Default.Delete,
                contentDescription = "Delete item",
                tint = Color.Red
            )
        }
    }
}
